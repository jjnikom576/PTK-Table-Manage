import scheduleAPI from '../../api/schedule-api.js';
import adminState from './state.js';
import { loadTeachersData } from './teacherManagement.js';
import { loadClassesData, renderClassesTable } from './classManagement.js';
import { loadRoomsData, renderRoomsTable } from './roomManagement.js';
import { loadSubjectsData, renderSubjectsTable, getActiveAdminContext } from './subjectManagement.js';
import { loadPeriodsData, renderPeriodsTable } from './periodManagement.js';
import {
  getClassDisplayNameById,
  getTeacherDisplayNameById,
  getRoomDisplayNameById,
  normalizeTeacherNameString
} from './entityHelpers.js';

export function initSchedulePromptTools() {
  const button = document.getElementById('btn-generate-ai');

  if (!button) {
    console.warn('‚ö†Ô∏è Schedule prompt button not found in DOM');
    return;
  }

  if (!button.textContent || !button.textContent.trim()) {
    button.textContent = 'üß† Generate Prompt';
  }

  if (button.dataset.bound === 'true') {
    return;
  }

  button.addEventListener('click', handleGenerateSchedulePrompt);
  button.dataset.bound = 'true';
}

async function handleGenerateSchedulePrompt() {
  const button = document.getElementById('btn-generate-ai');
  if (!button) {
    return;
  }

  if (adminState.isGeneratingSchedulePrompt) {
    return;
  }

  const originalLabel = button.textContent;

  try {
    adminState.isGeneratingSchedulePrompt = true;
    button.disabled = true;
    button.textContent = '‚è≥ Preparing prompt...';

    const { year, semesterId } = getActiveAdminContext();
    const semesterName = adminState.activeSemester?.name
      || adminState.activeSemester?.semester_name
      || adminState.context?.semester?.name
      || adminState.context?.semester?.semester_name
      || null;

    if (!year) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt');
      return;
    }

    if (!semesterId) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt');
      return;
    }

    await ensureSchedulePromptData(year, semesterId);

    const dataset = buildSchedulePromptDataset(year, semesterId, semesterName);

    if (!dataset.subjects || dataset.subjects.length === 0) {
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞');
      return;
    }

    const promptText = buildSchedulePromptText(dataset);
    const downloaded = downloadPromptFile(promptText, year, semesterId);
    if (downloaded) {
      alert('‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .txt ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö AI');
    }
  } catch (error) {
    console.error('‚ùå Error generating schedule prompt:', error);
    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
  } finally {
    adminState.isGeneratingSchedulePrompt = false;
    if (button) {
      button.disabled = false;
      button.textContent = originalLabel;
    }
  }
}

async function ensureSchedulePromptData(year, semesterId) {
  try {
    if (typeof scheduleAPI.invalidateCacheByPattern === 'function') {
      scheduleAPI.invalidateCacheByPattern(`subjects_${year}_`);
      scheduleAPI.invalidateCacheByPattern(`teachers_${year}_`);
      scheduleAPI.invalidateCacheByPattern(`classes_${year}_`);
      scheduleAPI.invalidateCacheByPattern(`rooms_${year}_`);
      scheduleAPI.invalidateCacheByPattern(`periods_${year}_`);
    }
  } catch (cacheError) {
    console.warn('‚ö†Ô∏è Unable to invalidate schedule cache before prompt generation:', cacheError);
  }

  await loadTeachersData();
  await loadClassesData();
  await loadRoomsData();
  await loadPeriodsData();
  await loadSubjectsData();

  renderClassesTable();
  renderRoomsTable();
  renderPeriodsTable();
  renderSubjectsTable();
}

function buildSchedulePromptDataset(year, semesterId, semesterName) {
  const scheduleTableName = `schedules_${year}`;
  const generatedAt = new Date().toISOString();

  const subjectsRaw = Array.isArray(adminState.subjectsRaw) ? adminState.subjectsRaw : [];

  const subjects = subjectsRaw
    .filter(subject => Number(subject.semester_id) === Number(semesterId))
    .map(subject => {
      const classIds = parseNumericArray(subject.class_ids, subject.class_id);
      const classNames = classIds.map(id => getClassDisplayNameById(id)).filter(Boolean);
      const teacherName = getTeacherDisplayNameById(subject.teacher_id)
        || normalizeTeacherNameString(subject.teacher_name)
        || null;

      const defaultRoomId = subject.default_room_id != null ? Number(subject.default_room_id) : null;

      return {
        id: subject.id != null ? Number(subject.id) : null,
        group_key: subject.group_key || null,
        subject_name: subject.subject_name || '',
        subject_code: subject.subject_code || null,
        subject_group: subject.subject_group || null,
        teacher_id: subject.teacher_id != null ? Number(subject.teacher_id) : null,
        teacher_name: teacherName,
        class_ids: classIds,
        class_names: classNames,
        default_room_id: defaultRoomId,
        room_name: getRoomDisplayNameById(defaultRoomId) || subject.room_name || null,
        periods_per_week: Number(subject.periods_per_week ?? subject.period_per_week ?? subject.period) || null,
        special_requirements: subject.special_requirements || subject.notes || subject.requirements || null,
        flags: {
          is_activity: Boolean(subject.is_activity || subject.is_activity_subject),
          is_scout: Boolean(subject.is_scout || subject.subject_code === 'SCOUT'),
          allow_merge: Boolean(subject.allow_merge || subject.is_shared_class)
        }
      };
    });

  const periods = Array.isArray(adminState.periods) ? adminState.periods.map(period => ({
    id: period.id ?? period.period_id ?? null,
    period_no: Number(period.period_no ?? period.period ?? 0),
    period_name: period.period_name || '',
    start_time: period.start_time || '',
    end_time: period.end_time || ''
  })) : [];

  return {
    generated_at: generatedAt,
    metadata: {
      year,
      semester_id: semesterId,
      semester_name: semesterName,
      schedule_table: scheduleTableName,
      total_subjects: subjects.length,
      total_periods: periods.length
    },
    subjects,
    periods,
    teachers: Array.isArray(adminState.teachers) ? adminState.teachers : [],
    classes: Array.isArray(adminState.classes) ? adminState.classes : [],
    rooms: Array.isArray(adminState.rooms) ? adminState.rooms : []
  };
}

function buildSchedulePromptText(dataset) {
  const context = dataset.metadata;

  const lines = [
    '## Objective',
    `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ${context.year} ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${context.semester_name || context.semester_id} ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ`,
    '',
    '## Requirements',
    '1. ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (periods_per_week) ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤ ‚Äú‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‚Äù ‡πÉ‡∏´‡πâ‡∏•‡∏á 1 ‡∏Ñ‡∏≤‡∏ö/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏Ñ‡∏≤‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò)',
    '2. ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ class_ids ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏£‡∏ß‡∏° ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ room_id ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô',
    '3. ‡∏ß‡∏¥‡∏ä‡∏≤‡∏•‡∏π‡∏Å‡πÄ‡∏™‡∏∑‡∏≠/‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà flagged ‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏Ñ‡∏≤‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò (day_of_week=3, period=last).',
    '4. ‡∏Ñ‡πà‡∏≤ room_id ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å rooms ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ',
    '   - ‡∏ñ‡πâ‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏°‡∏µ default_room_id ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô',
    '   - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô (HR) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ class_id',
    '   - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ HR ‡πÉ‡∏´‡πâ set room_id = NULL',
    '',
    '5. ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©:',
    '   - ‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (flags.is_activity=true) ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò‡∏Ñ‡∏≤‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
    '   - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ teacher_name ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ô',
    '   - ‡∏ñ‡πâ‡∏≤ room_id = NULL (‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥) ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏•‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô (HR) ‡∏Ç‡∏≠‡∏á class_id ‡∏ô‡∏±‡πâ‡∏ô ‡πÜ',
    '   - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö HR ‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á room_id = NULL',
    '',
    '6. ‡∏ß‡∏±‡∏ô‚Äì‡πÄ‡∏ß‡∏•‡∏≤:',
    '   - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‚Äì‡∏û‡∏§‡∏´‡∏±‡∏™ (day_of_week ‚àà {1,2,3,4})',
    '   - ‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå (day_of_week=5) = Playday ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    '   - ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå (6) ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå (7)',
    '   - ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏±‡∏Å/‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô (period_name ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‚Äú‡∏û‡∏±‡∏Å/‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô/Lunch/Break‚Äù)',
    '   - ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ period_no ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô periods ‡∏Ç‡∏≠‡∏á dataset',
    '',
    '7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥:',
    '   - ‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥ (class_id, day_of_week, period_no)',
    '   - ‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥ (room_id, day_of_week, period_no) ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏•‡∏π‡∏Å‡πÄ‡∏™‡∏∑‡∏≠/‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
    '   - ‡∏Ñ‡∏£‡∏π 1 ‡∏Ñ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥ (teacher_id, day_of_week, period_no) ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏•‡∏π‡∏Å‡πÄ‡∏™‡∏∑‡∏≠',
    '',
    '8. Summary Schema Rule:',
    '   - 1 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (room_id) ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà 1 ‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏•‡∏π‡∏Å‡πÄ‡∏™‡∏∑‡∏≠/‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ 3)',
    '',
    '9. ‡∏ñ‡πâ‡∏≤ periods_per_week ‡∏Ç‡∏≠‡∏á ‚Äú‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‚Äù ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà 1 ‡∏Ñ‡∏≤‡∏ö (Wed-last)',
    '',
    '10. ‡∏ñ‡πâ‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô',
    '',
    '## Dataset (‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏ß‡∏≤‡∏á‡πÉ‡∏ô Prompt ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)',
    '```json',
    JSON.stringify(dataset, null, 2),
    '```',
    '',
    '## Output Format Example',
    '11. Output: ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô SQL ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á INSERT ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
    `   INSERT INTO ${context.schedule_table} (semester_id, subject_id, class_id, day_of_week, period_no, room_id)`,
    `   VALUES (${context.semester_id}, 366, 11, 1, 1, 11), (${context.semester_id}, 168, 17, 1, 2, 17), ...;`,
    '   - 1 ‡πÅ‡∏ñ‡∏ß‡∏ï‡πà‡∏≠ 1 ‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    ''
  ];

  return lines.filter(Boolean).join('\n');
}

function downloadPromptFile(content, year, semesterId) {
  if (!content) {
    return false;
  }

  const filename = `schedule_prompt_${year}_semester-${semesterId}.txt`;

  try {
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    const urlFactory = window.URL || window.webkitURL;
    const url = urlFactory.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.style.display = 'none';

    document.body.appendChild(link);

    requestAnimationFrame(() => {
      try {
        link.click();
      } finally {
        document.body.removeChild(link);
        urlFactory.revokeObjectURL(url);
      }
    });
    return true;
  } catch (error) {
    console.warn('‚ö†Ô∏è Automatic download failed, falling back to new window.', error);
    const encoded = encodeURIComponent(content);
    const fallbackWindow = window.open(`data:text/plain;charset=utf-8,${encoded}`, '_blank');
    if (!fallbackWindow) {
      try {
        navigator.clipboard?.writeText(content);
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Prompt ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß');
        return false;
      } catch (_) {
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Prompt ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á:\n\n' + content.substring(0, 5000));
        return false;
      }
    } else {
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏à‡∏∂‡∏á‡πÄ‡∏õ‡∏¥‡∏î Prompt ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô');
      return false;
    }
  }
}

function parseNumericArray(arrayLike, fallback) {
  if (Array.isArray(arrayLike)) {
    return arrayLike
      .map(value => Number(value))
      .filter(value => Number.isFinite(value));
  }

  if (typeof arrayLike === 'string') {
    const trimmed = arrayLike.trim();
    if (trimmed.startsWith('[')) {
      try {
        const parsed = JSON.parse(trimmed);
        if (Array.isArray(parsed)) {
          return parsed
            .map(value => Number(value))
            .filter(value => Number.isFinite(value));
        }
      } catch (_) {
        // ignore JSON parse error, fall back to comma split
      }
    }

    if (trimmed.length > 0) {
      return trimmed
        .split(',')
        .map(value => Number(value.trim()))
        .filter(value => Number.isFinite(value));
    }
  }

  if (fallback != null) {
    const num = Number(fallback);
    if (Number.isFinite(num)) {
      return [num];
    }
  }

  return [];
}

export { buildSchedulePromptDataset, buildSchedulePromptText, downloadPromptFile };
